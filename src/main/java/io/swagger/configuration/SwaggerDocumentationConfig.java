package io.swagger.configuration;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.service.ApiInfo;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-05-03T01:14:53.240Z[GMT]")
@Configuration
public class SwaggerDocumentationConfig {

    @Bean
    public Docket customImplementation(){
        return new Docket(DocumentationType.OAS_30)
                .select()
                    .apis(RequestHandlerSelectors.basePackage("io.swagger.api"))
                    .build()
                .directModelSubstitute(org.threeten.bp.LocalDate.class, java.sql.Date.class)
                .directModelSubstitute(org.threeten.bp.OffsetDateTime.class, java.util.Date.class)
                .apiInfo(apiInfo());
    }

    ApiInfo apiInfo() {
        return new ApiInfoBuilder()
            .title("Cashflows Gateway API")
            .description("Our Gateway API provides a structured and consistent way for you to send requests to our payment gateway. It includes calls for creating payment jobs, refunds and other payment-related operations. The Gateway API handles extensive validation and conversion for each request. It provides added security with built-in authentication and authorisation checks.  Our API is REST-based. It accepts calls in JavaScript Object Notation (JSON). You can use different programming languages to create the JSON. Our API uses standard HTTP response codes and familiar verbs including: + GET     To retrieve a resource. + PUT    To update existing resources. + PATCH    To update existing resources. + DELETE    To delete existing resources. ## Before you start You need access to Cashflows Go. Cashflows Go is your online account with us where you can find the access credentials that you need to be able to communicate with the gateway.  When you first sign up with us, we send you a welcome email that includes the details that you need to sign into Cashflows Go.  For testing, you need an integration account. If you don’t have one you can request one by email to __[techsupport@cashflows.com](mailto:techsupport@cashflows.com)__. ## Authentication When we have set you up to use our gateway, we provide you with your: + Configuration ID     This is the unique identifier of your business account (also referred to as the merchant account). You need to include this in API messages so that we can recognise your business and match transactions to it. + API key     This is the key to use for hashing API messages that you send us.  These are available for you to collect in Cashflows Go. You need to include the configuration ID in the HTML header of each call to the gateway. You also need to include a SHA512 hash in the header. This is to sign each API call. ## Signing API calls All messages that we send are signed with a SHA512 hash. You must use the same hashing technique that we do so that we can match our hash with yours. The hash assures message consistency and protects the payment request from being tampered with during transfer to our gateway (a man-in-the-middle attack).  To calculate the hash, append the message body to the API password, for example: <password><message body>. If the message body is empty, you only need to hash the password.  The calculated hash is then converted to a hex-string and sent in the header with Hash: xxxxxx. It’s possible for the gateway to have two passwords at one time. When you change a password, you need to first create a new second password. When all systems have migrated to the new password, you can remove the first password. This way you can change a password without any downtime. ## HTML header As well as the hash, you must supply the configuration ID in the HTML header of each call to the gateway. The configuration ID enables the gateway to identify your application and recognise the configuration settings for your business. The header must be in the format:  `ConfigurationId: xxxxx`  `Hash:ExampleExampleExampleExampleExampleExampleExampleExampleExample ExampleExampleExampleExampleExampleExample`  ## Sending us payment details  Payment requests need to be in the form of a HTTPS POST to either our integration or production environment:  **Environment &ensp;** &ensp; **URL**  Integration&emsp;&emsp;&emsp;<https://gateway-int.cashflows.com>  Production&emsp;&emsp;&emsp;<https://gateway.cashflows.com>  ## Response codes  Our gateway uses the following standardised codes in the responses that you receive. These codes tell you if a request was successful or not. A code that starts with 2 indicates success. A code that starts with 4 indicates an issue.  **Code &ensp;** &ensp; **Meaning**  200&emsp;&emsp;&emsp;Payment or payment job received or retrieved or cancelled successfully  201&emsp;&emsp;&emsp;Payment job created successfully  400&emsp;&emsp;&emsp;Request contains errors  401&emsp;&emsp;&emsp;Invalid token  403&emsp;&emsp;&emsp;Insufficient permissions  404&emsp;&emsp;&emsp;Configuration not found  406&emsp;&emsp;&emsp;Bad response  ## Testing   To enable you to test your integration before going live, we have an integration environment. Here you can simulate different payment scenarios without affecting any live data or interacting with any external finance or issuing networks. We also have some test cards that you can use.  If you need an integration account for testing purposes, send an email request to __[implementations@cashflows.com](mailto:implementations@cashflows.com)__.  ## Going live  **Important**: You need different credentials for the integration and production environments.  Before you can connect to our production environment for going live, you need:  + A production account   + Sign-in credentials  We provide these when your account has been approved. If you have not received these, send an email to __[support@cashflows.com](mailto:support@cashflows.com)__.")
            .license("© 2022 CashFlows Europe Group")
            .licenseUrl("http://unlicense.org")
            .termsOfServiceUrl("")
            .version("v1")
            .contact(new Contact("","", ""))
            .build();
    }

    @Bean
    public OpenAPI openApi() {
        return new OpenAPI()
            .info(new Info()
                .title("Cashflows Gateway API")
                .description("Our Gateway API provides a structured and consistent way for you to send requests to our payment gateway. It includes calls for creating payment jobs, refunds and other payment-related operations. The Gateway API handles extensive validation and conversion for each request. It provides added security with built-in authentication and authorisation checks.  Our API is REST-based. It accepts calls in JavaScript Object Notation (JSON). You can use different programming languages to create the JSON. Our API uses standard HTTP response codes and familiar verbs including: + GET     To retrieve a resource. + PUT    To update existing resources. + PATCH    To update existing resources. + DELETE    To delete existing resources. ## Before you start You need access to Cashflows Go. Cashflows Go is your online account with us where you can find the access credentials that you need to be able to communicate with the gateway.  When you first sign up with us, we send you a welcome email that includes the details that you need to sign into Cashflows Go.  For testing, you need an integration account. If you don’t have one you can request one by email to __[techsupport@cashflows.com](mailto:techsupport@cashflows.com)__. ## Authentication When we have set you up to use our gateway, we provide you with your: + Configuration ID     This is the unique identifier of your business account (also referred to as the merchant account). You need to include this in API messages so that we can recognise your business and match transactions to it. + API key     This is the key to use for hashing API messages that you send us.  These are available for you to collect in Cashflows Go. You need to include the configuration ID in the HTML header of each call to the gateway. You also need to include a SHA512 hash in the header. This is to sign each API call. ## Signing API calls All messages that we send are signed with a SHA512 hash. You must use the same hashing technique that we do so that we can match our hash with yours. The hash assures message consistency and protects the payment request from being tampered with during transfer to our gateway (a man-in-the-middle attack).  To calculate the hash, append the message body to the API password, for example: <password><message body>. If the message body is empty, you only need to hash the password.  The calculated hash is then converted to a hex-string and sent in the header with Hash: xxxxxx. It’s possible for the gateway to have two passwords at one time. When you change a password, you need to first create a new second password. When all systems have migrated to the new password, you can remove the first password. This way you can change a password without any downtime. ## HTML header As well as the hash, you must supply the configuration ID in the HTML header of each call to the gateway. The configuration ID enables the gateway to identify your application and recognise the configuration settings for your business. The header must be in the format:  `ConfigurationId: xxxxx`  `Hash:ExampleExampleExampleExampleExampleExampleExampleExampleExample ExampleExampleExampleExampleExampleExample`  ## Sending us payment details  Payment requests need to be in the form of a HTTPS POST to either our integration or production environment:  **Environment &ensp;** &ensp; **URL**  Integration&emsp;&emsp;&emsp;<https://gateway-int.cashflows.com>  Production&emsp;&emsp;&emsp;<https://gateway.cashflows.com>  ## Response codes  Our gateway uses the following standardised codes in the responses that you receive. These codes tell you if a request was successful or not. A code that starts with 2 indicates success. A code that starts with 4 indicates an issue.  **Code &ensp;** &ensp; **Meaning**  200&emsp;&emsp;&emsp;Payment or payment job received or retrieved or cancelled successfully  201&emsp;&emsp;&emsp;Payment job created successfully  400&emsp;&emsp;&emsp;Request contains errors  401&emsp;&emsp;&emsp;Invalid token  403&emsp;&emsp;&emsp;Insufficient permissions  404&emsp;&emsp;&emsp;Configuration not found  406&emsp;&emsp;&emsp;Bad response  ## Testing   To enable you to test your integration before going live, we have an integration environment. Here you can simulate different payment scenarios without affecting any live data or interacting with any external finance or issuing networks. We also have some test cards that you can use.  If you need an integration account for testing purposes, send an email request to __[implementations@cashflows.com](mailto:implementations@cashflows.com)__.  ## Going live  **Important**: You need different credentials for the integration and production environments.  Before you can connect to our production environment for going live, you need:  + A production account   + Sign-in credentials  We provide these when your account has been approved. If you have not received these, send an email to __[support@cashflows.com](mailto:support@cashflows.com)__.")
                .termsOfService("")
                .version("v1")
                .license(new License()
                    .name("© 2022 CashFlows Europe Group")
                    .url("http://unlicense.org"))
                .contact(new io.swagger.v3.oas.models.info.Contact()
                    .email("")));
    }

}
