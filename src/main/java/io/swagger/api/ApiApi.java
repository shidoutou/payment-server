/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.CapturePaymentRequest;
import io.swagger.model.CapturePaymentResponse;
import io.swagger.model.CardTokenisationRequest;
import io.swagger.model.CardTokenisationResponse;
import io.swagger.model.CreatePaymentJobRequest;
import io.swagger.model.Currency;
import io.swagger.model.ErrorResponse;
import io.swagger.model.Locale;
import io.swagger.model.PaymentJobResponse;
import io.swagger.model.PaymentResponse;
import io.swagger.model.RefundPaymentRequest;
import io.swagger.model.RefundPaymentResponse;
import io.swagger.model.SupportedPaymentMethodsResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-05-03T01:14:53.240Z[GMT]")
@Validated
public interface ApiApi {

    @Operation(summary = "Creates a token.", description = "", tags={ "CardTokenisations" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Card tokenisation request created successfully.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = CardTokenisationResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Request contains errors.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Invalid token.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Insufficient permissions.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Configuration not found.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/api/gateway/card-tokenisation",
        produces = { "text/plain", "application/json", "text/json" }, 
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/_*+json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CardTokenisationResponse> apiGatewayCardTokenisationPost(@Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="configurationId", required=false) String configurationId, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="hash", required=false) String hash, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "locale", required = false) Locale locale, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody CardTokenisationRequest body);


    @Operation(summary = "Cancels a payment job.", description = "", tags={ "PaymentJobs" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Payment job cancelled successfully.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = PaymentJobResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Request contains errors.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Invalid token.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Insufficient permissions.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Configuration or payment job not found.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "406", description = "", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/api/gateway/payment-jobs/{paymentJobReference}/cancel",
        produces = { "text/plain", "application/json", "text/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<PaymentJobResponse> apiGatewayPaymentJobsPaymentJobReferenceCancelPatch(@Parameter(in = ParameterIn.PATH, description = "The reference of the payment job to cancel.", required=true, schema=@Schema()) @PathVariable("paymentJobReference") Long paymentJobReference, @Parameter(in = ParameterIn.HEADER, description = "Your configuration ID." ,schema=@Schema()) @RequestHeader(value="configurationId", required=false) String configurationId, @Parameter(in = ParameterIn.HEADER, description = "A hexadecimal sha512 hash of your password." ,schema=@Schema()) @RequestHeader(value="hash", required=false) String hash, @Parameter(in = ParameterIn.QUERY, description = "The locale to translate errors and warnings to." ,schema=@Schema()) @Valid @RequestParam(value = "locale", required = false) Locale locale);


    @Operation(summary = "Retrieves a payment job.", description = "", tags={ "PaymentJobs" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Payment job retrieved successfully.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = PaymentJobResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Request contains errors.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Invalid token.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Insufficient permissions.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Configuration or payment job not found.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/api/gateway/payment-jobs/{paymentJobReference}",
        produces = { "text/plain", "application/json", "text/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PaymentJobResponse> apiGatewayPaymentJobsPaymentJobReferenceGet(@Parameter(in = ParameterIn.PATH, description = "The reference of the payment job to retrieve.", required=true, schema=@Schema()) @PathVariable("paymentJobReference") Long paymentJobReference, @Parameter(in = ParameterIn.HEADER, description = "Your configuration ID." ,schema=@Schema()) @RequestHeader(value="configurationId", required=false) String configurationId, @Parameter(in = ParameterIn.HEADER, description = "A hexadecimal sha512 hash of your password." ,schema=@Schema()) @RequestHeader(value="hash", required=false) String hash, @Parameter(in = ParameterIn.QUERY, description = "The locale to translate errors and warnings to." ,schema=@Schema()) @Valid @RequestParam(value = "locale", required = false) Locale locale);


    @Operation(summary = "Cancels a payment.", description = "", tags={ "PaymentJobs" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Payment cancelled successfully.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = PaymentResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Request contains errors.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Invalid token.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Insufficient permissions.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Configuration, payment job or payment not found.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "406", description = "", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/api/gateway/payment-jobs/{paymentJobReference}/payments/{paymentReference}/cancel",
        produces = { "text/plain", "application/json", "text/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<PaymentResponse> apiGatewayPaymentJobsPaymentJobReferencePaymentsPaymentReferenceCancelPatch(@Parameter(in = ParameterIn.PATH, description = "The reference of the payment job which payment to cancel.", required=true, schema=@Schema()) @PathVariable("paymentJobReference") Long paymentJobReference, @Parameter(in = ParameterIn.PATH, description = "The reference of the payment to cancel.", required=true, schema=@Schema()) @PathVariable("paymentReference") Long paymentReference, @Parameter(in = ParameterIn.HEADER, description = "Your configuration ID." ,schema=@Schema()) @RequestHeader(value="configurationId", required=false) String configurationId, @Parameter(in = ParameterIn.HEADER, description = "A hexadecimal sha512 hash of your password." ,schema=@Schema()) @RequestHeader(value="hash", required=false) String hash, @Parameter(in = ParameterIn.QUERY, description = "The locale to translate errors and warnings to." ,schema=@Schema()) @Valid @RequestParam(value = "locale", required = false) Locale locale);


    @Operation(summary = "Creates a capture for a payment.", description = "", tags={ "PaymentJobs" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Capture created successfully.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = CapturePaymentResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Request contains errors.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Invalid token.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Insufficient permissions.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Configuration, payment job or payment not found.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "406", description = "", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/api/gateway/payment-jobs/{paymentJobReference}/payments/{paymentReference}/captures",
        produces = { "text/plain", "application/json", "text/json" }, 
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/_*+json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CapturePaymentResponse> apiGatewayPaymentJobsPaymentJobReferencePaymentsPaymentReferenceCapturesPost(@Parameter(in = ParameterIn.PATH, description = "The reference of the payment job which payment to capture.", required=true, schema=@Schema()) @PathVariable("paymentJobReference") Long paymentJobReference, @Parameter(in = ParameterIn.PATH, description = "The reference of the payment to create a capture for.", required=true, schema=@Schema()) @PathVariable("paymentReference") Long paymentReference, @Parameter(in = ParameterIn.HEADER, description = "Your configuration ID." ,schema=@Schema()) @RequestHeader(value="configurationId", required=false) String configurationId, @Parameter(in = ParameterIn.HEADER, description = "A hexadecimal sha512 hash of your password + the body." ,schema=@Schema()) @RequestHeader(value="hash", required=false) String hash, @Parameter(in = ParameterIn.QUERY, description = "The locale to translate errors and warnings to." ,schema=@Schema()) @Valid @RequestParam(value = "locale", required = false) Locale locale, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody CapturePaymentRequest body);


    @Operation(summary = "Retrieves a payment.", description = "", tags={ "PaymentJobs" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Payment retrieved successfully.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = PaymentResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Request contains errors.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Invalid token.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Insufficient permissions.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Configuration, payment job or payment not found.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/api/gateway/payment-jobs/{paymentJobReference}/payments/{paymentReference}",
        produces = { "text/plain", "application/json", "text/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PaymentResponse> apiGatewayPaymentJobsPaymentJobReferencePaymentsPaymentReferenceGet(@Parameter(in = ParameterIn.PATH, description = "The reference of the payment job which payment to retrieve.", required=true, schema=@Schema()) @PathVariable("paymentJobReference") Long paymentJobReference, @Parameter(in = ParameterIn.PATH, description = "The reference of the payment to retrieve.", required=true, schema=@Schema()) @PathVariable("paymentReference") Long paymentReference, @Parameter(in = ParameterIn.HEADER, description = "Your configuration ID." ,schema=@Schema()) @RequestHeader(value="configurationId", required=false) String configurationId, @Parameter(in = ParameterIn.HEADER, description = "A hexadecimal sha512 hash of your password." ,schema=@Schema()) @RequestHeader(value="hash", required=false) String hash, @Parameter(in = ParameterIn.QUERY, description = "The locale to translate errors and warnings to." ,schema=@Schema()) @Valid @RequestParam(value = "locale", required = false) Locale locale);


    @Operation(summary = "Creates a refund for a payment.", description = "", tags={ "PaymentJobs" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Refund created successfully.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = RefundPaymentResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Request contains errors.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Invalid token.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Insufficient permissions.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Configuration, payment job or payment not found.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "406", description = "", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/api/gateway/payment-jobs/{paymentJobReference}/payments/{paymentReference}/refunds",
        produces = { "text/plain", "application/json", "text/json" }, 
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/_*+json" }, 
        method = RequestMethod.POST)
    ResponseEntity<RefundPaymentResponse> apiGatewayPaymentJobsPaymentJobReferencePaymentsPaymentReferenceRefundsPost(@Parameter(in = ParameterIn.PATH, description = "The reference of the payment job which payment to refund.", required=true, schema=@Schema()) @PathVariable("paymentJobReference") Long paymentJobReference, @Parameter(in = ParameterIn.PATH, description = "The reference of the payment to create a refund for.", required=true, schema=@Schema()) @PathVariable("paymentReference") Long paymentReference, @Parameter(in = ParameterIn.HEADER, description = "Your configuration ID." ,schema=@Schema()) @RequestHeader(value="configurationId", required=false) String configurationId, @Parameter(in = ParameterIn.HEADER, description = "A hexadecimal sha512 hash of your password + the body." ,schema=@Schema()) @RequestHeader(value="hash", required=false) String hash, @Parameter(in = ParameterIn.QUERY, description = "The locale to translate errors and warnings to." ,schema=@Schema()) @Valid @RequestParam(value = "locale", required = false) Locale locale, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody RefundPaymentRequest body);


    @Operation(summary = "Creates a new payment job.", description = "", tags={ "PaymentJobs" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Payment job created successfully.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = PaymentJobResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Request contains errors.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Invalid token.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Insufficient permissions.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Configuration not found.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "406", description = "", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/api/gateway/payment-jobs",
        produces = { "text/plain", "application/json", "text/json" }, 
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/_*+json" }, 
        method = RequestMethod.POST)
    ResponseEntity<PaymentJobResponse> apiGatewayPaymentJobsPost(@Parameter(in = ParameterIn.HEADER, description = "Your configuration ID." ,schema=@Schema()) @RequestHeader(value="configurationId", required=false) String configurationId, @Parameter(in = ParameterIn.HEADER, description = "A hexadecimal sha512 hash of your password + the body." ,schema=@Schema()) @RequestHeader(value="hash", required=false) String hash, @Parameter(in = ParameterIn.QUERY, description = "The locale to translate errors and warnings to." ,schema=@Schema()) @Valid @RequestParam(value = "locale", required = false) Locale locale, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody CreatePaymentJobRequest body);


    @Operation(summary = "Retrieve supported payment methods", description = "", tags={ "SupportedPaymentMethods" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The request was handled successfully.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = SupportedPaymentMethodsResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Request contains errors.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Invalid token.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Insufficient permissions.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Configuration not found.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/api/gateway/supported-payment-methods",
        produces = { "text/plain", "application/json", "text/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SupportedPaymentMethodsResponse> apiGatewaySupportedPaymentMethodsGet(@Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="configurationId", required=false) String configurationId, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="hash", required=false) String hash, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "collectAmount", required = false) Double collectAmount, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "currency", required = false) Currency currency, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "all", required = false) Boolean all, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "customerReference", required = false) Long customerReference, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "locale", required = false) Locale locale);

}

